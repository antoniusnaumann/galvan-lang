type Container {
    value: t
}

fn get_value(self: Container<t>) -> t {
    self.value
}

test "Simple generic container type" {
    let container = Container(value: 42)

    assert container.value == 42
    assert container.get_value() == 42
}

fn repr(self: t) -> String where t: ToString {
    t.to_string()
}

test "Generic function with 'where' clause" {
    let a = 15.repr()
    assert a == "15"

    let b = "string".repr()
    assert b == "string"
}

// fn concat_str(self: a, other: b) -> String where a, b: ToString {
//     self.to_string() ++ other.to_string()
// }

// test "Generic function with paramm list in 'where' clause" {
//     let concat = 15.concat_str(12)
//     assert concat == "1512"
    
//     let concat = "some ".concat_str("string")
//     assert concat == "some string"
// }
