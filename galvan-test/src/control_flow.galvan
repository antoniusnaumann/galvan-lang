test "If clause" {
    if true {
        assert(true)
    } else {
        assert(false)
    }
}

test "If expression" {
    let some = if 6 == 6 { "Something" }

    // TODO: Auto-unwrap optionals in comparisons to make this work
    // assert some == "Something"

    let nothing = if 6 == 7 { "Something" }

    // TODO: Introduce none keyword
    // assert nothing == none
}

test "If-Else expression" {
    let result = if 6 == 7 { "Correct" } else { "Wrong" }
    assert result == "Wrong"
}

test "Try expression" {
    let optional = if true { 6 }

    let result = try optional |value| {
        value + 1
    } else {
        panic "Optional was none"
    }

    assert result == 7
}

fn returns_result(ok: Bool) -> Int!Int {
    if ok {
        42
    } else {
        throw 21
    }
}

test "Try expression on result" {
    let result = returns_result(true)
    try result |ok| {
        assert ok == 42
    } else {
        panic "Result value was expected to be okay but was error"
    }

    let result = returns_result(false)
    try result |ok| {
        panic "Result value was expected to be error but was ok"
    } else |err| {
        assert err == 42
    }
}
