type Dog {
    name: String
    age: Int
}

test "Create struct" {
    let dog = Dog(name: "Rex", age: 3)
    assert dog.name == "Rex"
    assert dog.age == 3
}

fn shout_name(self: Dog) -> String {
    self.name.to_uppercase()
}

test "Call method" {
    let dog = Dog(name: "Rex", age: 3)
    assert dog.shout_name() == "REX"
}

fn happy_birthday(mut self: Dog) {
    self.age = self.age + 1
}

test "Call method with mutation" {
    mut dog = Dog(name: "Rex", age: 3)
    dog.happy_birthday()
    assert dog.age == 4
}

test "Mutate struct" {
    mut dog = Dog(name: "Rex", age: 3)
    dog.name = "Bello"
    assert dog.name == "Bello"
}

fn new_dog(name: String) -> Dog {
    Dog(name: name, age: 0)
}

test "Construct from borrowed parameters" {
    let dog = new_dog("Hasso")
    assert dog.name == "Hasso"
    assert dog.age == 0
}

type Book {
    title: String = "Lorem Ipsum"
    content: String = "Lorem ipsum dolor sit amet..."
}

test "Structs with default fields" {
    let book = Book()
    assert book.title == "Lorem Ipsum"
    assert book.content == "Lorem ipsum dolor sit amet..."
}

test "Structs with some default fields" {
    let book = Book(content: "empty")
    assert book.title == "Lorem Ipsum"
    assert book.content == "empty"
}

