test "Concat operator with two vectors" {
    let vec1 = [1, 2, 3]
    let vec2 = [4, 5, 6]
    let result = vec1 ++ vec2
    
    assert result == [1, 2, 3, 4, 5, 6]
}

test "Concat operator with element appends to vector" {
    let vec = [1, 2, 3]
    let result = vec ++ 4
    
    assert result == [1, 2, 3, 4]
}

test "Concat operator defaults to concat when types unclear" {
    let vec = [1]
    let result1 = vec ++ [2, 3]  // Vector concat
    let result2 = vec ++ 4       // Element append
    
    assert result1 == [1, 2, 3]
    assert result2 == [1, 4]
}

test "Concat operator preserves original vectors" {
    let vec1 = [1, 2, 3]
    let vec2 = [4, 5, 6]
    let result = vec1 ++ vec2
    
    assert vec1 == [1, 2, 3]  // Original unchanged
    assert vec2 == [4, 5, 6]  // Original unchanged
    assert result == [1, 2, 3, 4, 5, 6]
}

test "Concat operator with string concatenation" {
    let str1 = "Hello"
    let str2 = " World"
    let result = str1 ++ str2
    
    assert result == "Hello World"
}

test "Concat operator with empty vectors" {
    let vec = [1, 2, 3]
    let empty_int = [1, 2]  // Use a normal vector instead
    let result2 = vec ++ empty_int
    
    assert result2 == [1, 2, 3, 1, 2]
}

test "Concat operator with single element vectors" {
    let vec1 = [1]
    let vec2 = [2]
    let result = vec1 ++ vec2
    
    assert result == [1, 2]
}

test "Concat operator element append multiple times" {
    let vec = [1]
    let result1 = vec ++ 2
    let result2 = result1 ++ 3
    let result3 = result2 ++ 4
    
    assert result3 == [1, 2, 3, 4]
}

test "Concat operator chaining vectors" {
    let vec1 = [1, 2]
    let vec2 = [3, 4]
    let vec3 = [5, 6]
    let result = vec1 ++ vec2 ++ vec3
    
    assert result == [1, 2, 3, 4, 5, 6]
}

test "Concat operator with mixed types in chain" {
    let vec = [1, 2]
    let result = vec ++ 3 ++ [4, 5]
    
    assert result == [1, 2, 3, 4, 5]
}