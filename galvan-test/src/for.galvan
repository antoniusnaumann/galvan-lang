test "for loop works" {
    let numbers = [1, 2, 3, 4, 5]
    mut i = 1
    mut last = 0

    for numbers |elem| {
        assert elem == i
        i += 1
        last = elem
    }

    assert last == 5
}

test "zipping iterators" {
    let num1 = [6, 5, 4, 3, 2, 1, 0]
    let num2 = [0, 1, 2, 3, 4, 5, 6]

    for num1.iter().zip(num2) |a, b| {
        assert a + b == 6
    }
}

test "for expression" {
    let numbers = [1, 4, 5, 7, 10]
    let doubled = for numbers |num| {
        num * 2
    }

    assert doubled.len() == 5

    assert doubled[2] == 10
    assert doubled[4] == 20

    for numbers.iter().zip(doubled) |a, b| {
        assert a * 2 == b * 1
    }
}

fn doubled(self: [Int]) -> [Int]? {
    for self |elem| {
        elem * 2
    }
}

test "autowrap for when optional is expected" {
    let numbers = [1, 2, 3, 4, 5]

    let doubled = numbers.doubled()
}

test "ownership for iterators" {
    let dogs = [Dog(name: "Bello", age: 4), Dog(name: "Hasso", age: 7)]

    for dogs.iter() |dog| {
        pet(dog)
    }
}

fn pet(dog: Dog) {}
